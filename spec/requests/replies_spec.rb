# rubocop:disable all

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/replies', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Reply. As you add validations to Reply, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) do
    skip('Add a hash of attributes valid for your model')
  end

  let(:invalid_attributes) do
    skip('Add a hash of attributes invalid for your model')
  end

  current_user = User.first_or_create!(name: 'user', username: 'user', email: 'user@example.com', password: 'password',
                                       password_confirmation: 'password')
  tweet = Tweet.first_or_create!(content: 'content', user: current_user)

  let(:invalid_attributes) do
    {
      'id' => 'a',
      'content' => ''

    }
  end
  let(:valid_attributes) do
    {
      'id' => '2',
      'content' => 'content',
      'user' => current_user,
      'replyable_id' => tweet.id,
      'replyable_type' => 'Tweet'
    }
  end
  describe 'GET /index' do
    it 'renders a successful response' do
      sign_in(current_user)
      reply = Reply.new(valid_attributes)
      reply.save
      get tweet_replies_path(reply.replyable)
      expect(response).to be_successful
    end
  end

  describe 'GET /show' do
    it 'renders a successful response' do
      sign_in(current_user)
      reply = Reply.new(valid_attributes)
      reply.save
      get tweet_reply_path(reply.replyable, reply)
      expect(response).to be_successful
    end
  end

  describe 'GET /new' do
    it 'renders a successful response' do
      sign_in(current_user)
      get new_tweet_reply_path(tweet)
      expect(response).to be_successful
    end
  end

  describe 'GET /edit' do
    it 'render a successful response' do
      sign_in(current_user)
      reply = Reply.new(valid_attributes)
      reply.save
      get edit_tweet_reply_path(reply.replyable, reply)
      expect(response).to be_successful
    end
  end

  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Tweet' do
        expect do
          sign_in(current_user)
          reply = Reply.new(valid_attributes)
          post tweet_replies_path(reply.replyable), params: { reply: valid_attributes }
        end.to change(Reply, :count).by(1)
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Tweet' do
        expect do
          sign_in(current_user)
          post tweet_replies_path(tweet.id), params: { reply: invalid_attributes }
        end.to change(Reply, :count).by(0)
      end
    end
  end

  describe 'PATCH /update' do
    context 'with valid parameters' do
      let(:new_attributes) do
        {
          'id' => '2',
          'content' => 'new content',
          'user' => current_user,
          'replyable_id' => tweet.id,
          'replyable_type' => 'Tweet'
        }
      end

      it 'updates the requested reply and redirects to the tweet' do
        sign_in(current_user)
        reply = Reply.new(valid_attributes)
        reply.save
        patch tweet_reply_path(reply.replyable, reply), params: { reply: new_attributes }
        reply.reload
        expect(response).to redirect_to(tweet_url(reply.replyable))
      end
    end
  end

  describe 'DELETE /destroy' do
    it 'destroys the requested reply' do
      sign_in(current_user)
      reply = Reply.new(valid_attributes)
      reply.save
      expect do
        delete reply_path(reply)
      end.to change(Reply, :count).by(-1)
      expect(response).to redirect_to(root_path)
    end
  end
end
