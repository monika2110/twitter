# rubocop:disable all

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/notifications', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Notification. As you add validations to Notification, be sure to
  # adjust the attributes here as well.
  current_user = User.first_or_create!(name: 'user', username: 'user', email: 'user@example.com', password: 'password',
                                       password_confirmation: 'password')
  other_user = User.first_or_create!(name: 'user2', username: 'user2', email: 'user2@example.com', password: 'password',
                                     password_confirmation: 'password')
  tweet = Tweet.first_or_create!(content: 'content', user: current_user)
  let(:invalid_attributes) do
    {
      'id' => 'a',

    }
  end
  let(:valid_attributes) do
    {
      'sender_id' => current_user.id,
      'recipient_id' => other_user.id,
      'source_id' => tweet.id,
      'read' => false

    }
    end

  describe 'GET /index' do
    it 'renders a successful response' do
      sign_in(current_user)
      Notification.create! valid_attributes
      get notifications_path
      expect(response).to be_successful
    end
  end


  describe 'GET /new' do
    it 'renders a successful response' do
      sign_in(current_user)
      get new_notification_url
      expect(response).to be_successful
    end
  end



  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Notification' do
        sign_in(current_user)
        expect do
          post notifications_url, params: { notification: valid_attributes }
        end.to change(Notification, :count).by(1)
      end

      it 'redirects to the created notification' do
        post notifications_url, params: { notification: valid_attributes }
        expect(response).to redirect_to(notification_url(Notification.last))
      end
    end

    context 'with invalid parameters' do
      it 'does not create a new Notification' do
        expect do
          post notifications_url, params: { notification: invalid_attributes }
        end.to change(Notification, :count).by(0)
      end

      it "renders a successful response (i.e. to display the 'new' template)" do
        post notifications_url, params: { notification: invalid_attributes }
        expect(response).to be_successful
      end
    end
  end


  describe 'DELETE /destroy' do
    it 'destroys the requested notification' do
      notification = Notification.create! valid_attributes
      expect do
        delete notification_url(notification)
      end.to change(Notification, :count).by(-1)
    end

    it 'redirects to the notifications list' do
      notification = Notification.create! valid_attributes
      delete notification_url(notification)
      expect(response).to redirect_to(notifications_url)
    end
  end
end
