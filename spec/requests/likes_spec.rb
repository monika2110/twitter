# rubocop:disable all

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe '/likes', type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Like. As you add validations to Like, be sure to
  # adjust the attributes here as well.
  current_user = User.first_or_create!(name: 'user', username: 'user', email: 'user@example.com', password: 'password',
                                       password_confirmation: 'password')

  tweet = Tweet.first_or_create!(content: 'content', user: current_user)
  let(:valid_attributes) do
    {


    }
  end

  let(:invalid_attributes) do
    {
    'id' => 'a'
    }
  end


  describe 'POST /create' do
    context 'with valid parameters' do
      it 'creates a new Like' do
        expect do
          sign_in(current_user)
          post tweet_likes_path(tweet), params: { like: valid_attributes }
        end.to change(Like, :count).by(1)
      end

    end

    context 'with invalid parameters' do
      it 'does not create a Like that already exists' do
        expect do
          post tweet_likes_path(tweet), params: { like: valid_attributes }
        end.to change(Like, :count).by(0)
      end
    end


    context 'with invalid parameters' do
      it 'does not create a new Like' do
        expect do
          post tweet_likes_path(tweet), params: { like: invalid_attributes }
        end.to change(Like, :count).by(0)
      end

    end
  end



  describe 'DELETE /destroy' do
    it 'destroys the requested like' do
      sign_in(current_user)
      like = Like.create!(likeable: tweet, user: current_user)
      expect do
        delete like_url(like)
      end.to change(Like, :count).by(-1)
    end
  end
end
